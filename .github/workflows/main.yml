name: "Terraform action"
on:
  push:
    branches:
      - develop
      - main
  pull_request:
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials from AWS account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.ACTION_ROLE }}
        aws-region: ${{ secrets.REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
  
    - name: Build, tag, and push image to Amazon ECR
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./src/Dockerfile
        push: true
        tags: ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.REGION}}.amazonaws.com/base-fxn:latest
    - name: Set the tag
      id: set_tag
      run: echo "::set-output name=tag_name::${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.REGION}}.amazonaws.com/base-fxn:latest"
    outputs:
        tag_name: ${{ steps.set_tag.outputs.tag_name }}
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest    
    permissions:
      contents: read
      packages: write
      id-token: write
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.ACTION_ROLE }}
          aws-region: ${{ secrets.REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check 
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.STATE_BUCKET }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.STATE_BUCKET_KEY }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var "image_uri=${{ needs.build-and-push.outputs.tag_name }}"
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -var "image_uri=${{ needs.build-and-push.outputs.tag_name }}" -auto-approve -input=false