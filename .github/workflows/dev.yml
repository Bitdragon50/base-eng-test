name: "Build Test deploy npe"
on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'plan or apply or destroy?'
        required: true
        default: 'plan'    
permissions:
      id-token: write 
      contents: read 
      pull-requests: write 
env:
  TF_LOG: INFO
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./src
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Install dependencies
      if: inputs.deploy_type != 'destroy' && inputs.deploy_type != 'plan'
      run: |
            python -m venv myenv
            source ./myenv/bin/activate
            pip install -r requirements.txt
            deactivate

    - name: Test with pytest
      if: inputs.deploy_type != 'destroy' && inputs.deploy_type != 'plan'
      run: |
            pip install -r requirements.txt
            pip install pytest 
            pytest
  
    - name: Package Lambda function
      if: inputs.deploy_type != 'destroy' && inputs.deploy_type != 'plan'
      run: |
        cd myenv/lib/python3.10/site-packages/ 
        zip -r ../../../../function.zip .
        cd ../../../../
        zip -g ./function.zip main.py       
        zip -g ./function.zip Pipfile       
        zip -g ./function.zip Pipfile.lock
      
    - name: Configure AWS credentials from AWS account
      if: inputs.deploy_type != 'destroy' && inputs.deploy_type != 'plan'
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ secrets.ACTION_ROLE }} 
        aws-region: ${{ vars.REGION }}

    - name: Deploy to S3
      if: inputs.deploy_type != 'destroy' && inputs.deploy_type != 'plan'
      run: aws s3 cp function.zip s3://${{ vars.FUNCTION_BUCKET }}/npe/${{ github.ref_name }}-function.zip

    - name: Pass source code path
      id: pass_path
      run: |
          echo "filepath=$(echo ${{ vars.FUNCTION_BUCKET }})" >> $GITHUB_ENV

    - name: Set the tag
      id: set_tag
      run: echo "::set-output name=filepath::$filepath"
    outputs:
        filepath: ${{ steps.set_tag.outputs.filepath }}
        
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      id-token: write
      issues: write
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ACTION_ROLE }} # I would change the value in the set env vars step higher up
          aws-region: ${{ vars.REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check 
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.NPE_STATE_BUCKET }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.STATE_BUCKET_KEY }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
         terraform plan -no-color -var "git_branch=${{ github.ref_name }}" -var "environment=npe" -var "filepath=${{ needs.build-and-push.outputs.filepath }}" | tee ${{ github.workspace }}/plan-output.txt
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v2
        if: steps.plan.outcome != 'failure'
        with:
          name: plan-output
          path: plan-output.txt

      - name: Comment Terraform Plan on PR
        if: github.event_name == 'pull_request' && steps.plan.outcome != 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('${{ github.workspace }}/plan-output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terraform Plan Output\n\`\`\`\n${planOutput}\n\`\`\``
            })

      - name: Terraform Apply
        if:  (github.event_name == 'push') && (!(inputs.deploy_type == 'destroy') || !(inputs.deploy_type == 'plan'))
        run: |
          terraform apply -var "git_branch=${{ github.ref_name }}" -var "environment=npe" -var "filepath=${{ needs.build-and-push.outputs.filepath }}" -auto-approve -input=false
          terraform output api_endpoint | sed 's/./& /g' | sed 's/ //g'
          api_endpoint=$(terraform output api_endpoint | sed 's/./& /g')
          echo "============================== API ENDPOINT BELOW ==================================="
          echo $api_endpoint | sed 's/ //g'
          echo "============================== API ENDPOINT ABOVE ==================================="

      - name: Terraform Destroy
        if: (!contains(fromJson('["refs/heads/main", "refs/heads/staging"]'), github.ref)  && inputs.deploy_type == 'destroy')
        run: |
          terraform destroy -var "git_branch=${{ github.ref_name }}" -var "environment=npe" -var "filepath=${{ needs.build-and-push.outputs.filepath }}" -auto-approve -input=false